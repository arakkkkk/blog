[{"content":"前回は仮想ネットワーク上にWebサーバーを構築しました 今回はProxyサーバーを構築し、管理ネットワークからWebサーバーを閲覧できるようにします\n1.構成と準備 2.Webサーバーの構築 3.Proxyサーバーの構築 \u0026lt;- ここ 4.DNSサーバーの構築 5.Grafanaで監視基盤の構築 ネットワーク構成のイメージ図 完成形 今回の内容 仮想マシンのデプロイ まずはProxyサーバー用の仮想マシンを作成していきます。 前回と同じ手順になるので作成や起動の手順は割愛します。(proxy-serverの名前で仮想マシンを作成しました) つづいて、仮想マシンの仮想ネットワーク設定を行っていきます。 ProxyサーバーはWebサーバーを閲覧するPCが利用する管理ネットワークと、Webサーバーが接続される仮想ネットワークの両方に足を出している必要があります。 仮想ネットワークにはクローン時点で既に接続されているため、新しくネットワークインターフェースを作成し、管理ネットワークに接続します。 まずは仮想マシンのネットワークインターフェースからネットワークインターフェースの追加をクリックします 下記設定で追加します (仮想マシンがパワーオフの状態で実施する)\nインターフェース形式: Direct attachment ソース: enp1s0 (KVMホストの物理NICを指定します) モデル: virtio MACアドレス: 自動生成 永続: ☑常に割り当てる 追加が完了するとCockpitの画面で追加されていることが確認できます\nインターフェースが追加できたので、仮想マシンの方でもネットワークの設定をしてあげます\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ sudo cat /etc/netplan/50-cloud-init.yaml # This file is generated from information provided by the datasource. Changes # to it will not persist across an instance reboot. To disable cloud-init\u0026#39;s # network configuration capabilities, write a file # /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following: # network: {config: disabled} network: ethernets: enp0s3: dhcp4: true dhcp-identifier: mac enp0s7: dhcp4: true version: 2 $ sudo netplan apply これで管理ネットワークと仮想ネットワークの両方に接続された仮想マシンが作成できました\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ ip a show enp0s7 2: enp0s7: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 52:54:00:87:91:ff brd ff:ff:ff:ff:ff:ff inet 192.168.122.82/24 metric 100 brd 192.168.122.255 scope global dynamic enp0s7 valid_lft 3503sec preferred_lft 3503sec inet6 fe80::5054:ff:fe87:91ff/64 scope link valid_lft forever preferred_lft forever $ ip a show enp0s3 3: enp0s3: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 52:54:00:72:29:d8 brd ff:ff:ff:ff:ff:ff inet 192.168.123.253/24 metric 100 brd 192.168.123.255 scope global dynamic enp0s3 valid_lft 3493sec preferred_lft 3493sec inet6 fe80::5054:ff:fe72:29d8/64 scope link valid_lft forever preferred_lft forever Proxyサーバの構築 squidを用いてProxyサーバーを構築します。 まずは、デプロイした仮想マシン上でsquidをインストールします\n1 $ sudo apt install squid インストールが完了したら、設定を行っていきます。 設定ファイルは/etc/squid/squid.confにあります。\n1 $ sudo vi /etc/squid/squid.conf ファイルの1400行目あたりに下記のような記載があるので、Allow_Local_Networkの設定を追記します\n1 2 3 4 5 6 7 8 9 10 11 12 # Example rule allowing access from your local networks. # Adapt to list your (internal) IP networks from where browsing # should be allowed acl localnet src 0.0.0.1-0.255.255.255 # RFC 1122 \u0026#34;this\u0026#34; network (LAN) acl localnet src 10.0.0.0/8 # RFC 1918 local private network (LAN) acl localnet src 100.64.0.0/10 # RFC 6598 shared address space (CGN) acl localnet src 169.254.0.0/16 # RFC 3927 link-local (directly plugged) machines acl localnet src 172.16.0.0/12 # RFC 1918 local private network (LAN) acl localnet src 192.168.0.0/16 # RFC 1918 local private network (LAN) acl localnet src fc00::/7 # RFC 4193 local private network range acl localnet src fe80::/10 # RFC 4291 link-local (directly plugged) machines acl Allow_Local_Network src 192.168.123.0/24 # \u0026lt;- ★ この行を追記 さらに、1601行目あたりのhttp_access allow localhostの後にも一行追記します\n1 2 http_access allow localhost http_access allow Allow_Local_Network # \u0026lt;- ★ この行を追記 上記設定が完了したら、squidを再起動します。\n1 $ sudo systemctl restart squid ","date":"2025-03-14T00:00:00Z","permalink":"http://localhost:1313/p/kvm%E3%81%A7%E8%87%AA%E5%AE%85%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E6%A7%8B%E7%AF%893.proxy%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E6%A7%8B%E7%AF%89/","title":"【KVMで自宅インフラ構築】3.Proxyサーバーの構築"},{"content":"前回はこれから作成する環境の構築の紹介とその準備を行いました。 今回はOSSを用いて簡単なWebサーバーを構築します\n1.構成と準備 2.Webサーバーの構築 \u0026lt;-ここ 3.Proxyサーバーの構築 4.DNSサーバーの構築 5.Grafanaで監視基盤の構築 ネットワーク構成のイメージ図 完成形 今回の内容 Webサーバーに利用するOSS選び このシリーズの目的としてはWebサーバーにこだわる必要はないのですが。。 せっかくなのでおすすめのOSSをいくつか紹介します\nmemos シンプルで軽量な自己ホスト型のメモ管理アプリ マークダウンをサポート Slackのような使い心地のメモ帳 gitea 軽量な自己ホスト型Gitサービス GitHubのようなリポジトリ管理をローカル環境で実現できる 低リソースで動作するのが特徴 Mattermost オープンソースのチーム向けチャットプラットフォーム Slackの代替として利用でき、高いカスタマイズ性を持つ Nextcloud 自己ホスト型のクラウドストレージサービス DropboxやGoogle Driveの代替として利用できる ファイル共有やコラボレーション機能が充実 Immich オープンソースの自己ホスト型写真・動画管理システム Google Photosの代替として利用できる AIによる画像認識や自動バックアップ機能をもつ 今回はmemosを使ってWebサーバーを構築します\n仮想マシンのデプロイ それではWebサーバー用の仮想マシンを作成していきます。 まずは仮想マシンの準備で作成した仮想マシンをクローンして新しい仮想マシンを作成します\n作成が完了したら、仮想マシンが仮想ネットワークdefaultに接続されていることを確認します\nネットワークの確認ができたら実行をクリックして仮想マシンを起動します\n起動が完了したら仮想マシンの画面からコンソールに入ることができます (SSHでログインしたい場合は KVMホスト -\u0026gt; 作成した仮想マシンで接続してください)\nWebサーバーの起動 デプロイは公式ドキュメントに沿ってDockerを使って行います。 下記dockerコマンドを実行するだけで完了です\n1 2 3 4 5 6 sudo docker run -d \\ --init \\ --name memos \\ --publish 5230:5230 \\ --volume ~/.memos/:/var/opt/memos \\ neosmemo/memos:stable まだブラウザから確認ができないため、curlコマンドでWebサーバーが動作しているか確認します\n1 2 3 4 5 6 $ curl -I 0.0.0.0:5230 HTTP/1.1 200 OK Accept-Ranges: bytes Content-Length: 2784 Content-Type: text/html; charset=utf-8 Date: Thu, 20 Mar 2025 14:20:13 GMT~$ curl -I 0.0.0.0:5230 確認できました。これでWebサーバーの準備は完了です！ 次は3.Proxyサーバーの構築でProxy経由でWebサーバーにアクセスできるようにします\n","date":"2025-03-12T00:00:00Z","permalink":"http://localhost:1313/p/kvm%E3%81%A7%E8%87%AA%E5%AE%85%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E6%A7%8B%E7%AF%892.web%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E6%A7%8B%E7%AF%89/","title":"【KVMで自宅インフラ構築】2.Webサーバーの構築"},{"content":"自宅でKVMを使ったシンプルなインフラ環境を構築します Proxyサーバーを介してWebサーバーへ接続し、さらにDNSで名前解決をできるようにします 最終的にgrafanaで各サーバーの監視設定を行うところまでをやろうと思います\n構築の流れ 1.構成と準備 \u0026lt;-ここ 2.Webサーバーの構築 3.Proxyサーバーの構築 4.DNSサーバーの構築 5.Grafanaで監視基盤の構築 ネットワーク構成のイメージ図 扱うネットワークは以下の２つです\n管理用ネットワーク: 192.168.122.0/24 Webサーバーを利用するクライアントが接続されているネットワーク このネットワークからProxyを介してWebサーバーにアクセスします KVMの仮想ネットワーク: 192.168.123.0/24 Webサーバーが接続されるローカルネットワーク 利用するソフトウェア 仮想マシンの作成やネットワークの設定にはCockpitを使用します\nKVMホストの構成 本シリーズ用に物理のホストを用意できなかったため、Nested KVM構成で行います\nCPU: 4vCPU メモリ: 16GB ストレージ: 100GB OS: Ubuntu 24.04 ネットワーク構成 仮想ネットワークには、デフォルトで作成されるdefaultを使用します\n1 2 3 4 $ virsh net-list Name State Autostart Persistent -------------------------------------------- default active yes yes この仮想ネットワークの詳細はnet-dumpxmlで確認することができ、以下の通りです\nNATモード で動作し、仮想マシンが外部ネットワークへアクセス可能 仮想ブリッジvirbr0を使用して通信を管理 ホストのIP (192.168.123.1) がゲートウェイとして機能 DHCP により、 192.168.123.2 〜 192.168.123.254 の範囲でIPアドレスを自動割り当て 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ virsh net-dumpxml default \u0026lt;network\u0026gt; \u0026lt;name\u0026gt;default\u0026lt;/name\u0026gt; \u0026lt;uuid\u0026gt;61c20183-757b-402f-a92e-677072b910d0\u0026lt;/uuid\u0026gt; \u0026lt;forward mode=\u0026#39;nat\u0026#39;\u0026gt; \u0026lt;nat\u0026gt; \u0026lt;port start=\u0026#39;1024\u0026#39; end=\u0026#39;65535\u0026#39;/\u0026gt; \u0026lt;/nat\u0026gt; \u0026lt;/forward\u0026gt; \u0026lt;bridge name=\u0026#39;virbr0\u0026#39; stp=\u0026#39;on\u0026#39; delay=\u0026#39;0\u0026#39;/\u0026gt; \u0026lt;mac address=\u0026#39;52:54:00:a3:31:ff\u0026#39;/\u0026gt; \u0026lt;ip address=\u0026#39;192.168.123.1\u0026#39; netmask=\u0026#39;255.255.255.0\u0026#39;\u0026gt; \u0026lt;dhcp\u0026gt; \u0026lt;range start=\u0026#39;192.168.123.2\u0026#39; end=\u0026#39;192.168.123.254\u0026#39;/\u0026gt; \u0026lt;/dhcp\u0026gt; \u0026lt;/ip\u0026gt; \u0026lt;/network\u0026gt; 仮想マシンの準備 今回は合計で4つの仮想マシンを構築します。 都度一から作成するのは面倒なのでテンプレートを作成し、それをクローンする形で使用します スペックは以下の通りです。\nCPU: 2vCPU メモリ: 4GB ストレージ: 20GB OS: Ubuntu 24.04 また、クローンした仮想マシンにDHCPから異なるIPが割り当てるよう、以下設定を追記しておきます (参考)\n1 2 3 4 5 6 network: ethernets: enp1s0: dhcp4: true dhcp-identifier: mac # この行を追記 version: 2 これで準備が整いました。次回は2.Webサーバーの構築を進めていきます\n","date":"2025-03-10T00:00:00Z","permalink":"http://localhost:1313/p/kvm%E3%81%A7%E8%87%AA%E5%AE%85%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E6%A7%8B%E7%AF%891.%E6%A7%8B%E6%88%90%E3%81%A8%E6%BA%96%E5%82%99/","title":"【KVMで自宅インフラ構築】1.構成と準備"},{"content":"前回はcockpitでWebブラウザからVMを確認するところまでを実施しました。今回はcockpitからVMを構築してみようと思います。\nネットワークの作成 前回作成したubuntu001は、デフォルトで作成されていたネットワーク(default)にアタッチしました。\n今回は新しくネットワークを作成し、そこにあタッチする形にしようと思います\ncockpitの仮想マシンタブから1個のネットワークをクリックします\n上の画像のようにdefaultネットワークの情報が確認できました\n仮想ネットワークの作成よりネットワークを作成します\n設定は以下を入力し、作成ボタンをクリックします\n名前: test_network001 フォワードモード: NAT (NATを使用してグローバルに出ることができる設定) デバイス: virbr0 (virbr0を設定しておくと新規でブリッジvirbr1が作成され、利用されます) IP設定: IPv4のみ IPv4 アドレス: 192.168.100.1 マスクまたはプレフィックス長: 24 DHCPの範囲を設定します: ☑ 開始: 192.168.100.2 / 末尾: 192.168.100.254 新しくtest_network001のネットワークが作成されたことが確認できます\nまた、デバイスにvirbr0を指定して作成しましたが、自動的に新しいブリッジvirbt1が作成され、デバイスに指定されていることが確認できます\n有効化をクリックすることで、このネットワークが利用可能になります。ホスト起動時に自動的に起動されるよう自動起動を有効にしておきましょう\nVMの構築 それではいよいよ仮想マシンの作成をしてみようと思います\ncockpitの仮想マシンから、仮想マシンの作成をクリックします\n表示される作成画面に、以下情報を入力し、作成して実行するをクリックしましょう\n接続: System インストールタイプ: ローカルインストールメディア インストールソース: /iso/ubuntu-24.04.1-live-server-amd64.iso オペレーティングシステム: Ubuntu 24.04 LTS (Noble Numbat) ストレージ: qcow2ボリュームの新規作成 ストレージの制限: 20GB メモリ: 4GB 作成してまもなく仮想マシンの一覧に追加され、状態が Runnningになっていることが確認できます\n作成したubuntu002を開いてみると、VMの情報と共に画面右側のコンソールではUbuntuのインストールが始まっていることが確認できます\nディスクとネットワークの設定は上図のようになっています。\nディスクはメインで使用するdiskと、OSをインストールするためのcdromがアタッチされています\nネットワークをみるとdefaultのネットワークがアタッチされていることがわかります。新しく作成したネットワークにしたいので、変更をしてみましょう\nネットワークの編集ボタンをクリックし、開かれる画面からソースをtest_network001に変更します\n変更することでインターフェースのソースとIPが変更されていることが確認できます\n以上がcockpitからのVM作成の手順になります。virshと比較してもかなり簡単に作成できることがわかります\nVMの構築②(番外編) 前の章では、cockpitで一から仮想マシンを作成しましたが、既存のVMをコピーすることで更に簡単にVMを作成することができます\n以下手順でVMのコピーを実施します\nコピー元の仮想マシンをシャットダウンする コピー元仮想マシンの右側三点リーダーからクローンを選択 名前を入力してクローンをクリック 終わりです。コピー元VMからコピーして新しいVMが作成されました\n以上、cockpitを使って仮想マシンを作成する方法を紹介しました。\n次回は仮想マシンがアタッチされる、仮想ネットワークについて書いていこうと思います\n","date":"2024-12-17T00:00:00Z","permalink":"http://localhost:1313/p/kvm%E3%81%AE%E4%BB%AE%E6%83%B3%E5%8C%96%E5%85%A5%E9%96%80cockpit%E3%81%A7vm%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/","title":"【KVMの仮想化入門④】cockpitでVMを構築してみる"},{"content":"前回はvirshを使って、CLIからVMを構築しました。今回はVMをブラウザから操作するためのcockpitをインストールして動かして見ようと思います\ncockpitとは: cockpitとは、下記特徴を持つソフトウェアです。今回は仮想化のために使用しますが、それはあくまでcockpitの機能の一部を利用する形となります\nLinuxシステムのサーバ管理用webサーバー LinuxシステムのCPU、メモリ、ネットワーク、ストレージなどのシステムリソースの使用状況をリアルタイムで監視できる 仮想マシンの作成、起動、停止、スナップショットの作成等簡単な操作をGUIで行うことができる 小規模な環境やシンプルな仮想化運用に適している その他のソフトウェアも気になっているので、後々記事にしていければと思っています\n以下は、LinuxにCockpitをインストールして仮想マシンを確認する手順を紹介するブログのMarkdown形式のサンプルです。\ncockpitのインストールと起動 以下のコマンドを実行して、cockpitと仮想マシンの管理に必要なパッケージをインストールします。\n1 sudo apt install cockpit cockpit-machines インストールが完了したら、Cockpitサービスを開始します。\n1 sudo systemctl start cockpit cockpit Webインターフェースにアクセス cockpitの起動が完了したため、Webブラウザから9090ポートで管理画面にアクセスできます。\n1 https://\u0026lt;サーバーのIPアドレス\u0026gt;:9090 以下のようなログインページが表示されるため、ubuntuのログインユーザーでログインします\nログインすると以下のような画面になります\nそして、仮想マシンのタブを開くと既に作成しているubuntu001が確認でき、\nこのページからは仮想マシンに対して以下の操作が可能となっています\nVMのインポート/新規作成 VMの電源操作(起動、停止、再起動) VMの移行 VMの削除 また、VM名をクリックすることでその仮想マシンの詳細を確認することができます\nここからVMのコンソールを操作することができるため、ここで作成したubuntu001のセットアップを行ないます\n(この記事では本手順は省略します。わからない方はこちらを参考にしていただけると良いかもしれません。)\n","date":"2024-12-16T00:00:00Z","permalink":"http://localhost:1313/p/kvm%E3%81%AE%E4%BB%AE%E6%83%B3%E5%8C%96%E5%85%A5%E9%96%80cockpit%E3%81%A7%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%8B%E3%82%89vm%E3%82%92%E6%93%8D%E4%BD%9C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/","title":"【KVMの仮想化入門③】cockpitでブラウザからVMを操作してみる"},{"content":"前回はKVMの仮想化基盤を用意するところまでをやってみました。今回はvirshを用いてCLIから仮想マシンを構築するところまでをやってみます\nvirshとは KVMやQEMUを利用した仮想化基盤の管理をコマンドラインから行うためのツール Libvirtという仮想化管理ツールをバックエンドに利用 仮想マシンの作成、削除、起動、停止、リソースの管理などをシンプルなコマンドで実行可能 virshで利用できる参照コマンド virshには仮想化リソースを参照するための多くのコマンドが用意されています。\nまずはよく利用しそうなコマンドを使ってみようと思います\n仮想マシンの参照コマンド virsh list --all 稼働中、停止中を問わずすべてのVMを表示します(今回はまだVMを作成できていないので表示なし) 1 2 3 ubuntu@kvm001:~$ virsh list --all Id Name State -------------------- 仮にVMが存在した場合、以下のような表示になります\n1 2 3 4 5 $ virsh list --all Id Name State -------------------------------- 12 ubuntu001 running - ubuntu002 shut off virsh dominfo \u0026lt;VM名\u0026gt; 指定したVMの詳細情報を表示(別途用意した環境で確認) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ virsh dominfo ubuntu001 Id: 12 Name: ubuntu001 UUID: bdce429c-1284-463b-8af4-f538374a3b2d OS Type: hvm State: running CPU(s): 2 CPU time: 10368.9s Max memory: 3145728 KiB Used memory: 3145728 KiB Persistent: yes Autostart: disable Managed save: no Security model: none Security DOI: 0 Messages: tainted: running with undesirable elevated privileges 仮想ネットワークの参照コマンド virsh net-list 現在有効な仮想ネットワークの一覧を表示します。 default という名前の仮想ネットワークがすでに作成されていることがわかります 1 2 3 4 ubuntu@kvm001:~$ virsh net-list --all Name State Autostart Persistent -------------------------------------------- default active yes yes virsh net-dumpxml \u0026lt;ネットワーク名\u0026gt; 指定したネットワークの設定を表示します。 1 2 3 4 5 6 7 ubuntu@kvm001:~$ virsh net-info default Name: default UUID: 61c20183-757b-402f-a92e-677072b910d0 Active: yes Persistent: yes Autostart: yes Bridge: virbr0 この仮想ネットワークについては、今後もう少し詳細を書きたいと思っています\n仮想ストレージの参照コマンド virsh pool-list 現在利用可能なストレージプールの一覧を表示します。(今回はまだ作成できていないので表示なし) 1 2 3 ubuntu@kvm001:~$ virsh pool-list --all Name State Autostart --------------------------- すでに作成されていた場合、以下のような表示になります\n1 2 3 4 5 $ virsh pool-list Name State Autostart ------------------------------------ default active yes ubuntu active yes virsh pool-info \u0026lt;プール名\u0026gt; 指定したストレージプールの詳細情報を表示します。 1 2 3 4 5 6 7 8 9 $ virsh pool-info default Name: default UUID: fa63badf-324b-4fa9-992c-81581e9c307f State: running Persistent: yes Autostart: yes Capacity: 456.35 GiB Allocation: 72.34 GiB Available: 384.00 GiB virsh仮想マシンを構築する 前置きが長くなりましたが、いよいよ仮想マシンの構築に入ります。\nisoの準備 今回は、ubuntuのVMを作成しようと思うので、wgetでubuntuのisoをダウンロードしておきます\n1 2 mkdir /iso sudo wget -P /iso https://releases.ubuntu.com/24.04.1/ubuntu-24.04.1-live-server-amd64.iso ディスクイメージの準備 仮想マシン用のディスクイメージを作成します。\n1 sudo qemu-img create -f qcow2 /var/lib/libvirt/images/ubuntu001.qcow2 20G 仮想マシンのXMLファイルを作成 libvirtでは、XMLを用いてVMの構成管理が行われます\nそのため、以下の仮想マシンの構成を定義するXMLファイルを用意します\n1 vi ubuntu001.xml ファイルには以下内容を記載します\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;domain type=\u0026#39;kvm\u0026#39;\u0026gt; \u0026lt;name\u0026gt;ubuntu001\u0026lt;/name\u0026gt; \u0026lt;memory unit=\u0026#39;MiB\u0026#39;\u0026gt;4096\u0026lt;/memory\u0026gt; \u0026lt;vcpu placement=\u0026#39;static\u0026#39;\u0026gt;2\u0026lt;/vcpu\u0026gt; \u0026lt;os\u0026gt; \u0026lt;type arch=\u0026#39;x86_64\u0026#39; machine=\u0026#39;pc-i440fx-6.2\u0026#39;\u0026gt;hvm\u0026lt;/type\u0026gt; \u0026lt;boot dev=\u0026#39;cdrom\u0026#39;/\u0026gt; \u0026lt;/os\u0026gt; \u0026lt;devices\u0026gt; \u0026lt;disk type=\u0026#39;file\u0026#39; device=\u0026#39;disk\u0026#39;\u0026gt; \u0026lt;driver name=\u0026#39;qemu\u0026#39; type=\u0026#39;qcow2\u0026#39;/\u0026gt; \u0026lt;source file=\u0026#39;/var/lib/libvirt/images/ubuntu001.qcow2\u0026#39;/\u0026gt; \u0026lt;target dev=\u0026#39;vda\u0026#39; bus=\u0026#39;virtio\u0026#39;/\u0026gt; \u0026lt;/disk\u0026gt; \u0026lt;disk type=\u0026#39;file\u0026#39; device=\u0026#39;cdrom\u0026#39;\u0026gt; \u0026lt;driver name=\u0026#39;qemu\u0026#39; type=\u0026#39;raw\u0026#39;/\u0026gt; \u0026lt;source file=\u0026#39;/iso/ubuntu-24.04.1-live-server-amd64.iso\u0026#39;/\u0026gt; \u0026lt;target dev=\u0026#39;sda\u0026#39; bus=\u0026#39;sata\u0026#39;/\u0026gt; \u0026lt;/disk\u0026gt; \u0026lt;interface type=\u0026#39;network\u0026#39;\u0026gt; \u0026lt;source network=\u0026#39;default\u0026#39;/\u0026gt; \u0026lt;/interface\u0026gt; \u0026lt;graphics type=\u0026#39;vnc\u0026#39; port=\u0026#39;-1\u0026#39; autoport=\u0026#39;yes\u0026#39;/\u0026gt; \u0026lt;/devices\u0026gt; \u0026lt;/domain\u0026gt; XMLに記載している内容について、細かい内容は省略しますが下記設定を盛り込んでいます\n基本情報 \u0026lt;name\u0026gt;ubuntu001\u0026lt;/name\u0026gt;: vm名をubuntu001とする \u0026lt;memory unit='MiB'\u0026gt;4096\u0026lt;/memory\u0026gt;: 仮想マシンに割り当てるメモリ量を4096MB=2GBとする \u0026lt;vcpu placement='static'\u0026gt;2\u0026lt;/vcpu\u0026gt;: 割り当てるvCPUの数を2にする OSの設定 (\u0026lt;os\u0026gt;) \u0026lt;boot dev='cdrom'/\u0026gt;: 仮想マシン起動時にCD-ROMを最初のブートデバイスとして使用するように設定 ストレージの設定 (\u0026lt;disk\u0026gt;) 仮想ディスク \u0026lt;source file='/var/lib/libvirt/images/ubuntu001.qcow2'/\u0026gt;: 作成した仮想ディスクのパスを指定 ISOイメージ（\u0026lt;disk\u0026gt;） \u0026lt;disk type='file' device='cdrom'\u0026gt;: ISOイメージを光学ドライブに割り当てる設定 \u0026lt;source file='/iso/ubuntu-24.04.1-live-server-amd64.iso'/\u0026gt;: ダウンロードしたISOイメージをソースに設定 ネットワーク設定 (\u0026lt;interface\u0026gt;) \u0026lt;interface type='network'\u0026gt;: 仮想マシンのネットワークインターフェイスを設定 (NATを用いた接続) \u0026lt;source network='default'/\u0026gt;: 事前定義されたdefaultネットワークを使用 詳細は下記サイトにまとまっています\n7.3. 仮想マシンの XML 設定例 | Red Hat Product Documentation 仮想マシンの定義を読み込む 用意したXMLファイルを読み込み、仮想マシンを定義します。\n1 virsh define ubuntu001.xml ちなみに、この時点で仮想マシンが作成された状態となり、virsh list --allでその状態が確認できます。\n1 2 3 4 ubuntu@kvm001:~$ virsh list --all Id Name State ---------------------------- - ubuntu001 shut off 仮想マシンを起動 定義した仮想マシンを起動します。\n1 virsh start ubuntu001 起動後、以下のコマンドで仮想マシンの状態を確認します。\n1 2 3 4 ubuntu@kvm001:~$ virsh list --all Id Name State ---------------------- 3 myvm running 以上で仮想マシンを構築するところまでが完了しました。\n次回はcockpitを使ってwebのGUIからVMを操作するところまでを実施します\n","date":"2024-12-11T00:00:00Z","permalink":"http://localhost:1313/p/kvm%E3%81%AE%E4%BB%AE%E6%83%B3%E5%8C%96%E5%85%A5%E9%96%80virsh%E3%81%A7vm%E3%82%92%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/","title":"【KVMの仮想化入門②】virshでVMをデプロイしてみる"},{"content":"KVM（Kernel-based Virtual Machine）について、少し勉強した上でLinuxのマシンにKVMの仮想化基盤を構築するところまでをやってみます\n仮想化の概要 KVMについてお話する前に、前提として仮想化と、そのプラットフォームについて書いてみます。\n仮想化とは、1つの物理コンピュータ上で複数の仮想マシン（Virtual Machine, VM）を実行する技術です。仮想化により、物理リソースの効率的な活用、アプリケーションの分離、テスト環境の作成が容易になります。\nKVMについて 仮想化技術に使用されるハイパーバイザには様々なものがありますが、今回利用するKVMについてざっくりと特徴を上げると以下になります\nオープンソースとして無料で提供されている Linuxカーネルに統合された仮想化機能 qemu, libvirtと組み合わせて利用される virsh, virt-manager, cockpit, OpenStack, oVirtなど様々な管理ツールが存在する AWS, GCP等のメガクラウドでも採用されている技術である ※ qemuについて: 第2回　Linux KVMで知る仮想マシンの概要 | gihyo.jp\n※ KVM管理ツールについて: KVMとは | OSSのデージーネット\nKVMを用いた仮想化環境の構築 1 2 3 4 5 6 # 必要なパッケージのインストール sudo apt update sudo apt install -y qemu-kvm libvirt-daemon libvirt-clients bridge-utils # 再起動 sudo reboot 以上で、KVMとその関連ツールのインストールは完了です。\nインストールの確認 以下のコマンドでインストールが成功しているか確認します。\nKVMの状態確認 1 2 3 ubuntu@kvm001:~$ sudo kvm-ok INFO: /dev/kvm exists KVM acceleration can be used libvirtサービスの状態確認 1 2 3 4 5 ubuntu@kvm001:~$ sudo systemctl status libvirtd ○ libvirtd.service - libvirt legacy monolithic daemon Loaded: loaded (/usr/lib/systemd/system/libvirtd.service; enabled; preset: enabled) Active: inactive (dead) since Fri 2024-12-13 03:18:37 UTC; 9s ago # ~~以下省略~~ 以上で、KVMとその関連ツールのインストールは完了です。\n次回はこのKVM環境でvirshを使って仮想マシンを構築してみます\n","date":"2024-12-10T00:00:00Z","permalink":"http://localhost:1313/p/kvm%E3%81%AE%E4%BB%AE%E6%83%B3%E5%8C%96%E5%85%A5%E9%96%80-linux%E3%81%ABkvm%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/","title":"【KVMの仮想化入門① 】LinuxにKVMをインストールする"}]